{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mediaProperties = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.formatTime = formatTime;\nexports.isVideoChild = isVideoChild;\nexports.mergeAndSortChildren = mergeAndSortChildren;\nexports.deprecatedWarning = deprecatedWarning;\nexports.throttle = throttle;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @file format-time.js\n *\n * Format seconds as a time string, H:MM:SS or M:SS\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide\n *\n * @param  {Number} seconds Number of seconds to be turned into a string\n * @param  {Number} guide   Number (in seconds) to model the string after\n * @return {String}         Time formatted as H:MM:SS or M:SS\n * @private\n * @function formatTime\n */\n\n\nfunction formatTime() {\n  var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;\n  var s = Math.floor(seconds % 60);\n  var m = Math.floor(seconds / 60 % 60);\n  var h = Math.floor(seconds / 3600);\n  var gm = Math.floor(guide / 60 % 60);\n  var gh = Math.floor(guide / 3600); // handle invalid times\n\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = m = s = '-';\n  } // Check if we need to show hours\n\n\n  h = h > 0 || gh > 0 ? h + ':' : ''; // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n\n  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':'; // Check if leading zero is need for seconds\n\n  s = s < 10 ? '0' + s : s;\n  return h + m + s;\n} // Check if the element belongs to a video element\n// only accept <source />, <track />,\n// <MyComponent isVideoChild />\n// elements\n\n\nfunction isVideoChild(c) {\n  if (c.props && c.props.isVideoChild) {\n    return true;\n  }\n\n  return c.type === 'source' || c.type === 'track';\n}\n\nvar find = function find(elements, func) {\n  return elements.filter(func)[0];\n}; // check if two components are the same type\n\n\nvar isTypeEqual = function isTypeEqual(component1, component2) {\n  var type1 = component1.type;\n  var type2 = component2.type;\n\n  if (typeof type1 === 'string' || typeof type2 === 'string') {\n    return type1 === type2;\n  }\n\n  if (typeof type1 === 'function' && typeof type2 === 'function') {\n    return type1.displayName === type2.displayName;\n  }\n\n  return false;\n}; // merge default children\n// sort them by `order` property\n// filter them by `disabled` property\n\n\nfunction mergeAndSortChildren(defaultChildren, _children, _parentProps) {\n  var defaultOrder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  var children = _react2.default.Children.toArray(_children);\n\n  var parentProps = _extends({}, _parentProps);\n\n  return children.filter(function (e) {\n    return !e.props.disabled;\n  }) // filter the disabled components\n  .concat(defaultChildren.filter(function (c) {\n    return !find(children, function (component) {\n      return isTypeEqual(component, c);\n    });\n  })).map(function (element) {\n    var defaultComponent = find(defaultChildren, function (c) {\n      return isTypeEqual(c, element);\n    });\n    delete parentProps.order;\n    var defaultProps = defaultComponent ? defaultComponent.props : {};\n\n    var props = _extends({}, parentProps, defaultProps, element.props);\n\n    var e = _react2.default.cloneElement(element, props, element.props.children);\n\n    return e;\n  }).sort(function (a, b) {\n    return (a.props.order || defaultOrder) - (b.props.order || defaultOrder);\n  });\n}\n/**\n * Temporary utility for generating the warnings\n */\n\n\nfunction deprecatedWarning(oldMethodCall, newMethodCall) {\n  // eslint-disable-next-line no-console\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon! Please use ' + newMethodCall + ' instead.');\n}\n\nfunction throttle(callback, limit) {\n  var _arguments = arguments;\n  var wait = false;\n  return function () {\n    if (!wait) {\n      callback.apply(null, _arguments);\n      wait = true;\n      setTimeout(function () {\n        wait = false;\n      }, limit);\n    }\n  };\n}\n\nvar mediaProperties = exports.mediaProperties = ['error', 'src', 'srcObject', 'currentSrc', 'crossOrigin', 'networkState', 'preload', 'buffered', 'readyState', 'seeking', 'currentTime', 'duration', 'paused', 'defaultPlaybackRate', 'playbackRate', 'played', 'seekable', 'ended', 'autoplay', 'loop', 'mediaGroup', 'controller', 'controls', 'volume', 'muted', 'defaultMuted', 'audioTracks', 'videoTracks', 'textTracks', 'width', 'height', 'videoWidth', 'videoHeight', 'poster'];","map":null,"metadata":{},"sourceType":"script"}