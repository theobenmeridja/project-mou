{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Fullscreen = function () {\n  function Fullscreen() {\n    _classCallCheck(this, Fullscreen);\n  }\n\n  _createClass(Fullscreen, [{\n    key: 'request',\n    value: function request(elm) {\n      if (elm.requestFullscreen) {\n        elm.requestFullscreen();\n      } else if (elm.webkitRequestFullscreen) {\n        elm.webkitRequestFullscreen();\n      } else if (elm.mozRequestFullScreen) {\n        elm.mozRequestFullScreen();\n      } else if (elm.msRequestFullscreen) {\n        elm.msRequestFullscreen();\n      }\n    }\n  }, {\n    key: 'exit',\n    value: function exit() {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      }\n    }\n  }, {\n    key: 'addEventListener',\n    value: function addEventListener(handler) {\n      document.addEventListener('fullscreenchange', handler);\n      document.addEventListener('webkitfullscreenchange', handler);\n      document.addEventListener('mozfullscreenchange', handler);\n      document.addEventListener('MSFullscreenChange', handler);\n    }\n  }, {\n    key: 'removeEventListener',\n    value: function removeEventListener(handler) {\n      document.removeEventListener('fullscreenchange', handler);\n      document.removeEventListener('webkitfullscreenchange', handler);\n      document.removeEventListener('mozfullscreenchange', handler);\n      document.removeEventListener('MSFullscreenChange', handler);\n    }\n  }, {\n    key: 'isFullscreen',\n    get: function get() {\n      return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n    }\n  }, {\n    key: 'enabled',\n    get: function get() {\n      return document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled;\n    }\n  }]);\n\n  return Fullscreen;\n}();\n\nexports.default = new Fullscreen();","map":null,"metadata":{},"sourceType":"script"}