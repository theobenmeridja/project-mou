{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = {\n  actions: _propTypes2.default.object,\n  player: _propTypes2.default.object,\n  children: _propTypes2.default.any,\n  startTime: _propTypes2.default.number,\n  loop: _propTypes2.default.bool,\n  muted: _propTypes2.default.bool,\n  autoPlay: _propTypes2.default.bool,\n  playsInline: _propTypes2.default.bool,\n  src: _propTypes2.default.string,\n  poster: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  preload: _propTypes2.default.oneOf(['auto', 'metadata', 'none']),\n  crossOrigin: _propTypes2.default.string,\n  onLoadStart: _propTypes2.default.func,\n  onWaiting: _propTypes2.default.func,\n  onCanPlay: _propTypes2.default.func,\n  onCanPlayThrough: _propTypes2.default.func,\n  onPlaying: _propTypes2.default.func,\n  onEnded: _propTypes2.default.func,\n  onSeeking: _propTypes2.default.func,\n  onSeeked: _propTypes2.default.func,\n  onPlay: _propTypes2.default.func,\n  onPause: _propTypes2.default.func,\n  onProgress: _propTypes2.default.func,\n  onDurationChange: _propTypes2.default.func,\n  onError: _propTypes2.default.func,\n  onSuspend: _propTypes2.default.func,\n  onAbort: _propTypes2.default.func,\n  onEmptied: _propTypes2.default.func,\n  onStalled: _propTypes2.default.func,\n  onLoadedMetadata: _propTypes2.default.func,\n  onLoadedData: _propTypes2.default.func,\n  onTimeUpdate: _propTypes2.default.func,\n  onRateChange: _propTypes2.default.func,\n  onVolumeChange: _propTypes2.default.func,\n  onResize: _propTypes2.default.func\n};\nvar defaultProps = {\n  preload: 'auto'\n};\n\nvar Video = function (_Component) {\n  _inherits(Video, _Component);\n\n  function Video(props) {\n    _classCallCheck(this, Video);\n\n    var _this = _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).call(this, props));\n\n    _this.video = null; // the html5 video\n\n    _this.play = _this.play.bind(_this);\n    _this.pause = _this.pause.bind(_this);\n    _this.seek = _this.seek.bind(_this);\n    _this.forward = _this.forward.bind(_this);\n    _this.replay = _this.replay.bind(_this);\n    _this.toggleFullscreen = _this.toggleFullscreen.bind(_this);\n    _this.getProperties = _this.getProperties.bind(_this);\n    _this.renderChildren = _this.renderChildren.bind(_this);\n    _this.handleLoadStart = _this.handleLoadStart.bind(_this);\n    _this.handleCanPlay = _this.handleCanPlay.bind(_this);\n    _this.handleCanPlayThrough = _this.handleCanPlayThrough.bind(_this);\n    _this.handlePlay = _this.handlePlay.bind(_this);\n    _this.handlePlaying = _this.handlePlaying.bind(_this);\n    _this.handlePause = _this.handlePause.bind(_this);\n    _this.handleEnded = _this.handleEnded.bind(_this);\n    _this.handleWaiting = _this.handleWaiting.bind(_this);\n    _this.handleSeeking = _this.handleSeeking.bind(_this);\n    _this.handleSeeked = _this.handleSeeked.bind(_this);\n    _this.handleFullscreenChange = _this.handleFullscreenChange.bind(_this);\n    _this.handleError = _this.handleError.bind(_this);\n    _this.handleSuspend = _this.handleSuspend.bind(_this);\n    _this.handleAbort = _this.handleAbort.bind(_this);\n    _this.handleEmptied = _this.handleEmptied.bind(_this);\n    _this.handleStalled = _this.handleStalled.bind(_this);\n    _this.handleLoadedMetaData = _this.handleLoadedMetaData.bind(_this);\n    _this.handleLoadedData = _this.handleLoadedData.bind(_this);\n    _this.handleTimeUpdate = _this.handleTimeUpdate.bind(_this);\n    _this.handleRateChange = _this.handleRateChange.bind(_this);\n    _this.handleVolumeChange = _this.handleVolumeChange.bind(_this);\n    _this.handleDurationChange = _this.handleDurationChange.bind(_this);\n    _this.handleProgress = (0, _utils.throttle)(_this.handleProgress.bind(_this), 250);\n    _this.handleKeypress = _this.handleKeypress.bind(_this);\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.forceUpdate(); // make sure the children can get the video property\n    } // get all video properties\n\n  }, {\n    key: 'getProperties',\n    value: function getProperties() {\n      var _this2 = this;\n\n      if (!this.video) {\n        return null;\n      }\n\n      return _utils.mediaProperties.reduce(function (properties, key) {\n        properties[key] = _this2.video[key];\n        return properties;\n      }, {});\n    } // get playback rate\n\n  }, {\n    key: 'play',\n    // play the video\n    value: function play() {\n      var promise = this.video.play();\n\n      if (promise !== undefined) {\n        promise.catch(function (error) {}).then(function () {});\n      }\n    } // pause the video\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      var promise = this.video.pause();\n\n      if (promise !== undefined) {\n        promise.catch(function (error) {}).then(function () {});\n      }\n    } // Change the video source and re-load the video:\n\n  }, {\n    key: 'load',\n    value: function load() {\n      this.video.load();\n    } // Add a new text track to the video\n\n  }, {\n    key: 'addTextTrack',\n    value: function addTextTrack() {\n      var _video;\n\n      (_video = this.video).addTextTrack.apply(_video, arguments);\n    } // Check if your browser can play different types of video:\n\n  }, {\n    key: 'canPlayType',\n    value: function canPlayType() {\n      var _video2;\n\n      (_video2 = this.video).canPlayType.apply(_video2, arguments);\n    } // toggle play\n\n  }, {\n    key: 'togglePlay',\n    value: function togglePlay() {\n      if (this.video.paused) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    } // seek video by time\n\n  }, {\n    key: 'seek',\n    value: function seek(time) {\n      try {\n        this.video.currentTime = time;\n      } catch (e) {// console.log(e, 'Video is not ready.')\n      }\n    } // jump forward x seconds\n\n  }, {\n    key: 'forward',\n    value: function forward(seconds) {\n      this.seek(this.video.currentTime + seconds);\n    } // jump back x seconds\n\n  }, {\n    key: 'replay',\n    value: function replay(seconds) {\n      this.forward(-seconds);\n    } // enter or exist full screen\n\n  }, {\n    key: 'toggleFullscreen',\n    value: function toggleFullscreen() {\n      var _props = this.props,\n          player = _props.player,\n          actions = _props.actions;\n      actions.toggleFullscreen(player);\n    } // Fired when the user agent\n    // begins looking for media data\n\n  }, {\n    key: 'handleLoadStart',\n    value: function handleLoadStart() {\n      var _props2 = this.props,\n          actions = _props2.actions,\n          onLoadStart = _props2.onLoadStart;\n      actions.handleLoadStart(this.getProperties());\n\n      if (onLoadStart) {\n        onLoadStart.apply(undefined, arguments);\n      }\n    } // A handler for events that\n    // signal that waiting has ended\n\n  }, {\n    key: 'handleCanPlay',\n    value: function handleCanPlay() {\n      var _props3 = this.props,\n          actions = _props3.actions,\n          onCanPlay = _props3.onCanPlay;\n      actions.handleCanPlay(this.getProperties());\n\n      if (onCanPlay) {\n        onCanPlay.apply(undefined, arguments);\n      }\n    } // A handler for events that\n    // signal that waiting has ended\n\n  }, {\n    key: 'handleCanPlayThrough',\n    value: function handleCanPlayThrough() {\n      var _props4 = this.props,\n          actions = _props4.actions,\n          onCanPlayThrough = _props4.onCanPlayThrough;\n      actions.handleCanPlayThrough(this.getProperties());\n\n      if (onCanPlayThrough) {\n        onCanPlayThrough.apply(undefined, arguments);\n      }\n    } // A handler for events that\n    // signal that waiting has ended\n\n  }, {\n    key: 'handlePlaying',\n    value: function handlePlaying() {\n      var _props5 = this.props,\n          actions = _props5.actions,\n          onPlaying = _props5.onPlaying;\n      actions.handlePlaying(this.getProperties());\n\n      if (onPlaying) {\n        onPlaying.apply(undefined, arguments);\n      }\n    } // Fired whenever the media has been started\n\n  }, {\n    key: 'handlePlay',\n    value: function handlePlay() {\n      var _props6 = this.props,\n          actions = _props6.actions,\n          onPlay = _props6.onPlay;\n      actions.handlePlay(this.getProperties());\n\n      if (onPlay) {\n        onPlay.apply(undefined, arguments);\n      }\n    } // Fired whenever the media has been paused\n\n  }, {\n    key: 'handlePause',\n    value: function handlePause() {\n      var _props7 = this.props,\n          actions = _props7.actions,\n          onPause = _props7.onPause;\n      actions.handlePause(this.getProperties());\n\n      if (onPause) {\n        onPause.apply(undefined, arguments);\n      }\n    } // Fired when the duration of\n    // the media resource is first known or changed\n\n  }, {\n    key: 'handleDurationChange',\n    value: function handleDurationChange() {\n      var _props8 = this.props,\n          actions = _props8.actions,\n          onDurationChange = _props8.onDurationChange;\n      actions.handleDurationChange(this.getProperties());\n\n      if (onDurationChange) {\n        onDurationChange.apply(undefined, arguments);\n      }\n    } // Fired while the user agent\n    // is downloading media data\n\n  }, {\n    key: 'handleProgress',\n    value: function handleProgress() {\n      var _props9 = this.props,\n          actions = _props9.actions,\n          onProgress = _props9.onProgress;\n\n      if (this.video) {\n        actions.handleProgressChange(this.getProperties());\n      }\n\n      if (onProgress) {\n        onProgress.apply(undefined, arguments);\n      }\n    } // Fired when the end of the media resource\n    // is reached (currentTime == duration)\n\n  }, {\n    key: 'handleEnded',\n    value: function handleEnded() {\n      var _props10 = this.props,\n          loop = _props10.loop,\n          player = _props10.player,\n          actions = _props10.actions,\n          onEnded = _props10.onEnded;\n\n      if (loop) {\n        this.seek(0);\n        this.play();\n      } else if (!player.paused) {\n        this.pause();\n      }\n\n      actions.handleEnd(this.getProperties());\n\n      if (onEnded) {\n        onEnded.apply(undefined, arguments);\n      }\n    } // Fired whenever the media begins waiting\n\n  }, {\n    key: 'handleWaiting',\n    value: function handleWaiting() {\n      var _props11 = this.props,\n          actions = _props11.actions,\n          onWaiting = _props11.onWaiting;\n      actions.handleWaiting(this.getProperties());\n\n      if (onWaiting) {\n        onWaiting.apply(undefined, arguments);\n      }\n    } // Fired whenever the player\n    // is jumping to a new time\n\n  }, {\n    key: 'handleSeeking',\n    value: function handleSeeking() {\n      var _props12 = this.props,\n          actions = _props12.actions,\n          onSeeking = _props12.onSeeking;\n      actions.handleSeeking(this.getProperties());\n\n      if (onSeeking) {\n        onSeeking.apply(undefined, arguments);\n      }\n    } // Fired when the player has\n    // finished jumping to a new time\n\n  }, {\n    key: 'handleSeeked',\n    value: function handleSeeked() {\n      var _props13 = this.props,\n          actions = _props13.actions,\n          onSeeked = _props13.onSeeked;\n      actions.handleSeeked(this.getProperties());\n\n      if (onSeeked) {\n        onSeeked.apply(undefined, arguments);\n      }\n    } // Handle Fullscreen Change\n\n  }, {\n    key: 'handleFullscreenChange',\n    value: function handleFullscreenChange() {} // Fires when the browser is\n    // intentionally not getting media data\n\n  }, {\n    key: 'handleSuspend',\n    value: function handleSuspend() {\n      var _props14 = this.props,\n          actions = _props14.actions,\n          onSuspend = _props14.onSuspend;\n      actions.handleSuspend(this.getProperties());\n\n      if (onSuspend) {\n        onSuspend.apply(undefined, arguments);\n      }\n    } // Fires when the loading of an audio/video is aborted\n\n  }, {\n    key: 'handleAbort',\n    value: function handleAbort() {\n      var _props15 = this.props,\n          actions = _props15.actions,\n          onAbort = _props15.onAbort;\n      actions.handleAbort(this.getProperties());\n\n      if (onAbort) {\n        onAbort.apply(undefined, arguments);\n      }\n    } // Fires when the current playlist is empty\n\n  }, {\n    key: 'handleEmptied',\n    value: function handleEmptied() {\n      var _props16 = this.props,\n          actions = _props16.actions,\n          onEmptied = _props16.onEmptied;\n      actions.handleEmptied(this.getProperties());\n\n      if (onEmptied) {\n        onEmptied.apply(undefined, arguments);\n      }\n    } // Fires when the browser is trying to\n    // get media data, but data is not available\n\n  }, {\n    key: 'handleStalled',\n    value: function handleStalled() {\n      var _props17 = this.props,\n          actions = _props17.actions,\n          onStalled = _props17.onStalled;\n      actions.handleStalled(this.getProperties());\n\n      if (onStalled) {\n        onStalled.apply(undefined, arguments);\n      }\n    } // Fires when the browser has loaded\n    // meta data for the audio/video\n\n  }, {\n    key: 'handleLoadedMetaData',\n    value: function handleLoadedMetaData() {\n      var _props18 = this.props,\n          actions = _props18.actions,\n          onLoadedMetadata = _props18.onLoadedMetadata,\n          startTime = _props18.startTime;\n\n      if (startTime && startTime > 0) {\n        this.video.currentTime = startTime;\n      }\n\n      actions.handleLoadedMetaData(this.getProperties());\n\n      if (onLoadedMetadata) {\n        onLoadedMetadata.apply(undefined, arguments);\n      }\n    } // Fires when the browser has loaded\n    // the current frame of the audio/video\n\n  }, {\n    key: 'handleLoadedData',\n    value: function handleLoadedData() {\n      var _props19 = this.props,\n          actions = _props19.actions,\n          onLoadedData = _props19.onLoadedData;\n      actions.handleLoadedData(this.getProperties());\n\n      if (onLoadedData) {\n        onLoadedData.apply(undefined, arguments);\n      }\n    } // Fires when the current\n    // playback position has changed\n\n  }, {\n    key: 'handleTimeUpdate',\n    value: function handleTimeUpdate() {\n      var _props20 = this.props,\n          actions = _props20.actions,\n          onTimeUpdate = _props20.onTimeUpdate;\n      actions.handleTimeUpdate(this.getProperties());\n\n      if (onTimeUpdate) {\n        onTimeUpdate.apply(undefined, arguments);\n      }\n    }\n    /**\n     * Fires when the playing speed of the audio/video is changed\n     */\n\n  }, {\n    key: 'handleRateChange',\n    value: function handleRateChange() {\n      var _props21 = this.props,\n          actions = _props21.actions,\n          onRateChange = _props21.onRateChange;\n      actions.handleRateChange(this.getProperties());\n\n      if (onRateChange) {\n        onRateChange.apply(undefined, arguments);\n      }\n    } // Fires when the volume has been changed\n\n  }, {\n    key: 'handleVolumeChange',\n    value: function handleVolumeChange() {\n      var _props22 = this.props,\n          actions = _props22.actions,\n          onVolumeChange = _props22.onVolumeChange;\n      actions.handleVolumeChange(this.getProperties());\n\n      if (onVolumeChange) {\n        onVolumeChange.apply(undefined, arguments);\n      }\n    } // Fires when an error occurred\n    // during the loading of an audio/video\n\n  }, {\n    key: 'handleError',\n    value: function handleError() {\n      var _props23 = this.props,\n          actions = _props23.actions,\n          onError = _props23.onError;\n      actions.handleError(this.getProperties());\n\n      if (onError) {\n        onError.apply(undefined, arguments);\n      }\n    }\n  }, {\n    key: 'handleResize',\n    value: function handleResize() {\n      var _props24 = this.props,\n          actions = _props24.actions,\n          onResize = _props24.onResize;\n      actions.handleResize(this.getProperties());\n\n      if (onResize) {\n        onResize.apply(undefined, arguments);\n      }\n    }\n  }, {\n    key: 'handleKeypress',\n    value: function handleKeypress() {}\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren() {\n      var _this3 = this;\n\n      var props = _extends({}, this.props, {\n        video: this.video\n      }); // to make sure the children can get video property\n\n\n      if (!this.video) {\n        return null;\n      } // only keep <source />, <track />, <MyComponent isVideoChild /> elements\n\n\n      return _react2.default.Children.toArray(this.props.children).filter(_utils.isVideoChild).map(function (c) {\n        var cprops = void 0;\n\n        if (typeof c.type === 'string') {\n          // add onError to <source />\n          if (c.type === 'source') {\n            cprops = _extends({}, c.props);\n            var preOnError = cprops.onError;\n\n            cprops.onError = function () {\n              if (preOnError) {\n                preOnError.apply(undefined, arguments);\n              }\n\n              _this3.handleError.apply(_this3, arguments);\n            };\n          }\n        } else {\n          cprops = props;\n        }\n\n        return _react2.default.cloneElement(c, cprops);\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props25 = this.props,\n          loop = _props25.loop,\n          poster = _props25.poster,\n          preload = _props25.preload,\n          src = _props25.src,\n          autoPlay = _props25.autoPlay,\n          playsInline = _props25.playsInline,\n          muted = _props25.muted,\n          crossOrigin = _props25.crossOrigin,\n          videoId = _props25.videoId;\n      return _react2.default.createElement('video', {\n        className: (0, _classnames2.default)('video-react-video', this.props.className),\n        id: videoId,\n        crossOrigin: crossOrigin,\n        ref: function ref(c) {\n          _this4.video = c;\n        },\n        muted: muted,\n        preload: preload,\n        loop: loop,\n        playsInline: playsInline,\n        autoPlay: autoPlay,\n        poster: poster,\n        src: src,\n        onLoadStart: this.handleLoadStart,\n        onWaiting: this.handleWaiting,\n        onCanPlay: this.handleCanPlay,\n        onCanPlayThrough: this.handleCanPlayThrough,\n        onPlaying: this.handlePlaying,\n        onEnded: this.handleEnded,\n        onSeeking: this.handleSeeking,\n        onSeeked: this.handleSeeked,\n        onPlay: this.handlePlay,\n        onPause: this.handlePause,\n        onProgress: this.handleProgress,\n        onDurationChange: this.handleDurationChange,\n        onError: this.handleError,\n        onSuspend: this.handleSuspend,\n        onAbort: this.handleAbort,\n        onEmptied: this.handleEmptied,\n        onStalled: this.handleStalled,\n        onLoadedMetadata: this.handleLoadedMetaData,\n        onLoadedData: this.handleLoadedData,\n        onTimeUpdate: this.handleTimeUpdate,\n        onRateChange: this.handleRateChange,\n        onVolumeChange: this.handleVolumeChange\n      }, this.renderChildren());\n    }\n  }, {\n    key: 'playbackRate',\n    get: function get() {\n      return this.video.playbackRate;\n    } // set playback rate\n    // speed of video\n    ,\n    set: function set(rate) {\n      this.video.playbackRate = rate;\n    }\n  }, {\n    key: 'muted',\n    get: function get() {\n      return this.video.muted;\n    },\n    set: function set(val) {\n      this.video.muted = val;\n    }\n  }, {\n    key: 'volume',\n    get: function get() {\n      return this.video.volume;\n    },\n    set: function set(val) {\n      if (val > 1) {\n        val = 1;\n      }\n\n      if (val < 0) {\n        val = 0;\n      }\n\n      this.video.volume = val;\n    } // video width\n\n  }, {\n    key: 'videoWidth',\n    get: function get() {\n      return this.video.videoWidth;\n    } // video height\n\n  }, {\n    key: 'videoHeight',\n    get: function get() {\n      return this.video.videoHeight;\n    }\n  }]);\n\n  return Video;\n}(_react.Component);\n\nexports.default = Video;\nVideo.propTypes = propTypes;\nVideo.defaultProps = defaultProps;\nVideo.displayName = 'Video';","map":null,"metadata":{},"sourceType":"script"}