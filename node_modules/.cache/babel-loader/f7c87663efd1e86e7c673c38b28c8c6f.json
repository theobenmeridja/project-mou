{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.player = player;\n\nvar _video = require('../actions/video');\n\nvar _player = require('../actions/player');\n\nvar initialState = {\n  currentSrc: null,\n  duration: 0,\n  currentTime: 0,\n  seekingTime: 0,\n  buffered: null,\n  waiting: false,\n  seeking: false,\n  paused: true,\n  autoPaused: false,\n  ended: false,\n  playbackRate: 1,\n  muted: false,\n  volume: 1,\n  readyState: 0,\n  networkState: 0,\n  videoWidth: 0,\n  videoHeight: 0,\n  hasStarted: false,\n  userActivity: true,\n  isActive: false,\n  isFullscreen: false\n};\n\nfunction player() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments[1];\n\n  switch (action.type) {\n    case _player.USER_ACTIVATE:\n      return _extends({}, state, {\n        userActivity: action.activity\n      });\n\n    case _player.PLAYER_ACTIVATE:\n      return _extends({}, state, {\n        isActive: action.activity\n      });\n\n    case _player.FULLSCREEN_CHANGE:\n      return _extends({}, state, {\n        isFullscreen: !!action.isFullscreen\n      });\n\n    case _video.SEEKING_TIME:\n      return _extends({}, state, {\n        seekingTime: action.time\n      });\n\n    case _video.END_SEEKING:\n      return _extends({}, state, {\n        seekingTime: 0\n      });\n\n    case _video.LOAD_START:\n      return _extends({}, state, action.videoProps, {\n        hasStarted: false,\n        ended: false\n      });\n\n    case _video.CAN_PLAY:\n      return _extends({}, state, action.videoProps, {\n        waiting: false\n      });\n\n    case _video.WAITING:\n      return _extends({}, state, action.videoProps, {\n        waiting: true\n      });\n\n    case _video.CAN_PLAY_THROUGH:\n    case _video.PLAYING:\n      return _extends({}, state, action.videoProps, {\n        waiting: false\n      });\n\n    case _video.PLAY:\n      return _extends({}, state, action.videoProps, {\n        ended: false,\n        paused: false,\n        autoPaused: false,\n        waiting: false,\n        hasStarted: true\n      });\n\n    case _video.PAUSE:\n      return _extends({}, state, action.videoProps, {\n        paused: true\n      });\n\n    case _video.END:\n      return _extends({}, state, action.videoProps, {\n        ended: true\n      });\n\n    case _video.SEEKING:\n      return _extends({}, state, action.videoProps, {\n        seeking: true\n      });\n\n    case _video.SEEKED:\n      return _extends({}, state, action.videoProps, {\n        seeking: false\n      });\n\n    case _video.ERROR:\n      return _extends({}, state, action.videoProps, {\n        error: 'UNKNOWN ERROR',\n        ended: true\n      });\n\n    case _video.DURATION_CHANGE:\n    case _video.TIME_UPDATE:\n    case _video.VOLUME_CHANGE:\n    case _video.PROGRESS_CHANGE:\n    case _video.RATE_CHANGE:\n    case _video.SUSPEND:\n    case _video.ABORT:\n    case _video.EMPTIED:\n    case _video.STALLED:\n    case _video.LOADED_META_DATA:\n    case _video.LOADED_DATA:\n    case _video.RESIZE:\n      var newState = _extends({}, state, action.videoProps);\n\n      if (action.videoProps.paused === false) {\n        newState.hasStarted = true;\n        newState.waiting = false;\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\nexports.default = player;","map":null,"metadata":{},"sourceType":"script"}